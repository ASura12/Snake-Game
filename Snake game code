#include <iostream>
#include <conio.h>
#include <windows.h>
using namespace std;

enum Direction
{
    STOP = 0,
    RIGHT,
    LEFT,
    UP,
    DOWN
};
Direction dr;
bool gameover;
const int height = 20;
const int breadth = 20;
int head_X, head_Y, fruit_X, fruit_Y, score;
int tail_x[100], tail_y[100];
int tail_len;

void setup();
void draw();
void input();
void logic();

int main()
{
    char start;
    cout << "\t-----------------------------------" << endl;
    cout << "\t\t  :Snake King:" << endl;
    cout << "\t-----------------------------------" << endl;
    cout << "\tPress 's' to start the game : ";
    cin >> start;
    if (start == 's')
    {
        setup();
    }
    return 0;
}

void setup()
{
    gameover = false;
    dr = STOP;
    head_X = breadth / 2;
    head_Y = height / 2;
    fruit_X = rand() % breadth;
    fruit_Y = rand() % height;
    score = 0;
    while (!gameover)
    {
        draw();
        input();
        logic();
        Sleep(60);
        system("cls");
        //gameover = true;
    }
}
void draw()
{
    system("cls");
    // Upper Border
    cout << "\t\t";
    for (int i = 0; i < breadth - 8; i++)
    {
        cout << "||";
    }

    cout << endl;
    // Snake,fruit,space and side border
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < breadth; j++)
        {
            // Side Border
            if (j == 0)
            {
                cout << "\t\t||";
            }
            // Snake head
            if (i == head_Y && j == head_X)
            {
                cout << "O";
            }
            // Fruit
            else if (i == fruit_Y && j == fruit_X)
            {
                cout << "*";
            }
            //Space ,snake tail
            else
            {
                bool print = false;
                // tail
                for (int k = 0; k < tail_len; k++)
                {
                    if (tail_x[k] == j && tail_y[k] == i)
                    {
                        cout << "o";
                        print = true;
                    }
                }
                // Space
                if (!print)
                {
                    cout << " ";
                }
                
            }
            // Right border
                if (j == breadth - 1)
            {
                cout << "||";
            }
            
        }
        cout << endl;
    }

    // Lower Border
    cout << "\t\t";
    for (int i = 0; i < breadth - 8; i++)
    {
        cout << "||";
    }
    cout << endl;
    cout << "\t\t\tScore : " << score << endl;
}
void input()
{
    if(_kbhit())
    switch (getch())
    {
    case '4':
        dr = LEFT;
        break;
    case '6':
        dr = RIGHT;
        break;
    case '8':
        dr = UP;
        break;
    case '2':
        dr = DOWN;
        break;
    
    default:
        break;
    }
}
void logic()
{
        // tail logic
    int prevx = tail_x[0];
    int prevy = tail_y[0];
    int prev2x, prev2y;
    tail_x[0] = head_X;
    tail_y[0] = head_Y;
    for(int i = 1; i < tail_len; i++){
        prev2x = tail_x[i];
        prev2y = tail_y[i];
        tail_x[i] = prevx;
        tail_y[i] = prevy;
        prevx = prev2x;
        prevy = prev2y;
    }

    // direction logic
    switch (dr)
    {
    case LEFT:
        head_X--;
        break;
    case RIGHT:
        head_X++;
        break;
    case UP:
        head_Y--;
        break;
    case DOWN:
        head_Y++;
        break;
    default:
        break;
    }

    // touch walls
    if(head_X >= breadth){
        head_X = 0;
    }
    else if(head_X < 0){
        head_X = breadth - 1;
    }
    if(head_Y >= height){
        head_Y = 0;
    }
    else if(head_Y < 0){
        head_Y = height - 1;
    }

    // snake bite itself
    for(int i = 0; i < tail_len; i++){
        if(tail_x[i] == head_X && tail_y[i] == head_Y){
            gameover = true;
        }
    }

    // snake eat fruit
    if(head_X == fruit_X && head_Y == fruit_Y){
        score += 10;
        fruit_X = rand()%breadth;
        fruit_Y = rand()%height;
        tail_len++;
    }

}
